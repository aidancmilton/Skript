import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id "com.github.hierynomus.license" version "0.14.0"
}

apply plugin: 'java'
apply plugin: 'maven-publish'

// Substitute dependencies' versions of Bukkit with latest Paper API
configurations.all {
	resolutionStrategy.dependencySubstitution {
		substitute module('org.bukkit:bukkit') with module('com.destroystokyo.paper:paper-api:1.14-R0.1-SNAPSHOT')
	}
}

allprojects {
	repositories {
		jcenter()
		mavenCentral()
	
		maven {
			url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
		}
	
		maven {
			url 'http://maven.sk89q.com/repo'
		}
	
		maven {
			url 'https://repo.destroystokyo.com/repository/maven-public//'
		}
	
		maven {
			url 'http://ci.emc.gs/nexus/content/groups/aikar/'
		}
	
		maven {
			url 'https://jitpack.io'
		}
	
		maven {
			url 'https://oss.sonatype.org/content/repositories/snapshots/'
		}
	
		maven {
			url 'https://repo.codemc.org/repository/maven-public'
		}
	}
	
	configurations {
		ecj
	}
	
	dependencies {
		ecj 'org.eclipse.jdt:ecj:3.15.0'
	}
	
	sourceCompatibility = 1.8
	compileJava {
		options.fork = true
		options.encoding = 'UTF-8'
		options.compilerArgs = ['-properties', '.settings/org.eclipse.jdt.core.prefs', '-encoding', 'UTF-8',
								'-warn:-tasks(TODO|FIXME|REMIND)']
		options.forkOptions.with {
			executable = 'java'
			jvmArgs = ['-classpath', project.configurations.ecj.asPath, 'org.eclipse.jdt.internal.compiler.batch.Main']
		}
	}
}

dependencies {
	implementation 'com.destroystokyo.paper:paper-api:1.16.1-R0.1-SNAPSHOT'
	implementation 'net.md-5:bungeecord-chat:1.16-R0.1'
	implementation 'org.eclipse.jdt:org.eclipse.jdt.annotation:1.1.0'
	implementation 'com.google.code.findbugs:findbugs:3.0.1'
	implementation 'com.sk89q.worldguard:worldguard-legacy:7.0.0-SNAPSHOT'
	implementation 'com.github.marcelo-mason:PreciousStones:24e3d4bf67b7240ae36b32be10e99d4091938c5c'
	implementation('net.milkbowl.vault:Vault:1.7.1') {
		exclude group: 'org.bstats', module: 'bstats-bukkit'
	}

	testImplementation 'junit:junit:4.12'
	testImplementation 'org.easymock:easymock:3.6'

	implementation fileTree(dir: 'lib', include: '*.jar')
}

processResources {
	filter ReplaceTokens, tokens: [
		"version": System.getenv("SKRIPT_VERSION") == null ? project.property("version") : System.getenv("SKRIPT_VERSION"),
		'today': "unknown", // Don't leak information about system this was built on
		"release-flavor": "selfbuilt-unknown", // Note: 'selfbuilt' prefix makes updater report a custom build
		"release-channel": "none", // No updates, so anything else wouldn't make sense
		"release-updater": "ch.njol.skript.update.NoUpdateChecker", // Disable update checking
		"release-source": "",
		"release-download": "null"
	]
}

jar {
	archiveName System.getenv('SKRIPT_JAR_NAME') == null ? 'Skript.jar' : System.getenv("SKRIPT_JAR_NAME")

	manifest {
		attributes("Name": "ch/njol/skript",
				"Sealed": "true")
	}

	from('skript-aliases') {
		into('aliases-english') // Change this if we get aliases in other languages
	}
	
	// Include all modules of Skript
	from 'skript-worldguard6/build/classes/java/main'
	from 'skript-worldguard7fawe/build/classes/java/main'
}

license {
	header file('licenseheader.txt')
	exclude('**/Metrics.java') // Not under GPLv3
	exclude('**/BurgerHelper.java') // Not exclusively GPLv3
	exclude('**/*.sk') // Sample scripts and maybe aliases
	exclude('**/*.lang') // Language files do not have headers (still under GPLv3)
	exclude('**/*.json') // JSON files do not have headers
}

task checkAliases {
	description 'Checks for the existence of the aliases.'

	doLast {
		def aliasFolder = new File('skript-aliases')
		if (!aliasFolder.exists() || aliasFolder.listFiles().length == 0) {
			throw new InvalidUserDataException("Aliases are missing from 'skript-aliases' folder. Consider fetching submodules with 'git submodule update --init'.")
		}
	}
}

jar.dependsOn checkAliases

task sourceJar(type: Jar) {
	from sourceSets.main.allJava
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId "ch.njol"
			artifactId "skript"
			version project.property("version")

			from components.java

			artifact sourceJar {
				classifier "sources"
			}
		}
	}

	repositories {
		maven {
			url "file:///itemapi_repo/"
		}
	}
}

// Set compile encoding to UTF-8 (#850)
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

// Task to check that test scripts are named correctly
tasks.create('testNaming') {
	doLast {
		// Regression tests
		for (def file : project.file('src/test/skript/tests/regressions').listFiles()) {
			def name = file.getName()
			if (!name.toLowerCase().equals(name)) {
				throw new InvalidUserDataException('invalid test name: ' + name)
			}
		}
		
		// Syntax tests
		for (def dir : project.file('src/test/skript/tests/syntaxes').listFiles()) {
			for (def file : dir.listFiles()) {
				def name = file.getName()
				if (!name.startsWith('.') && !Character.isJavaIdentifierStart(name.codePointAt(0))) {
					throw new InvalidUserDataException('invalid test name: ' + name)
				}
			}
		}
	}
}

// Create a test task with given name, environments dir/file and is it development mode task
void createTestTask(String name, String environments, boolean devMode) {
	tasks.create(name, Exec) {
		// Execute JUnit tests, compile Skript and check test naming
		dependsOn(test, jar, testNaming)
		if (devMode) {
			standardInput = System.in
		}
		commandLine 'java', '-cp',
				"build${File.separator}libs${File.separator}Skript.jar${File.pathSeparator}" +
					project.configurations.runtimeClasspath.find {it.name.startsWith('gson')},
				'ch.njol.skript.tests.platform.PlatformMain',
				'test_runners', 'src/test/skript/tests', 'src/test/resources/runner_data', environments, "" + devMode
	}
}

// Register different Skript testing tasks
createTestTask('quickTest', 'src/test/skript/environments/main/paper-1.15.2.json', false)
createTestTask('skriptTest', 'src/test/skript/environments/main', false)
createTestTask('skriptTestFull', 'src/test/skript/environments/', false)
createTestTask('skriptTestDev', 'src/test/skript/environments/main/' + (System.getProperty('skript.testEnv') == null
		? 'paper-1.15.2.json' : System.getProperty('skript.testEnv') + '.json'), true)

// Build flavor configurations
task githubResources(type: ProcessResources) {
	from ('src/main/resources') {
		include '**'
		version = System.getenv("SKRIPT_VERSION") == null ? project.property("version") : System.getenv("SKRIPT_VERSION")
		def channel = "stable"
		if (version.contains("alpha")) {
			channel = "alpha"
		} else if (version.contains("beta")) {
			channel = "beta"
		}
		filter ReplaceTokens, tokens: [
			"version": version,
			"today": "" + LocalDate.now(),
			"release-flavor": "skriptlang-github", // SkriptLang build, distributed on Github
			"release-channel": channel, // Release channel, see above
			"release-updater": "ch.njol.skript.update.GithubChecker", // Github API client
			"release-source": "https://api.github.com/repos/SkriptLang/Skript/releases", // Github API URL
			"release-download": "null" // Update checker will figure it out
		]
	}
	into 'build/resources/main'
}

task githubRelease(type: Jar) {
	from sourceSets.main.output
	dependsOn githubResources
	archiveName = 'Skript-github.jar'
	
	manifest {
		attributes("Name": "ch/njol/skript",
				"Sealed": "true")
	}
	
	from('skript-aliases') {
		into('aliases-english')
	}
	
	// Include all modules of Skript
	from 'skript-worldguard6/build/classes/java/main'
	from 'skript-worldguard7fawe/build/classes/java/main'
}

task spigotResources(type: ProcessResources) {
	from ('src/main/resources') {
		include '**'
		version = System.getenv("SKRIPT_VERSION") == null ? project.property("version") : System.getenv("SKRIPT_VERSION")
		def channel = "stable"
		if (version.contains("alpha")) {
			channel = "alpha"
		} else if (version.contains("beta")) {
			channel = "beta"
		}
		filter ReplaceTokens, tokens: [
			"version": version,
			"today": "" + LocalDate.now(),
			"release-flavor": "skriptlang-spigot", // SkriptLang build, distributed on Spigot resources
			"release-channel": channel, // Release channel, see above
			"release-updater": "ch.njol.skript.update.GithubChecker", // Github API client
			"release-source": "https://api.github.com/repos/SkriptLang/Skript/releases", // Github API URL
			"release-download": "\"http://example.com\"" // TODO insert Spigot URL
		]
	}
	into 'build/resources/main'
}

task spigotRelease(type: Jar) {
	from sourceSets.main.output
	dependsOn spigotResources
	archiveName = 'Skript-spigot.jar'
	
	manifest {
		attributes("Name": "ch/njol/skript",
				"Sealed": "true")
	}
	
	from('skript-aliases') {
		into('aliases-english')
	}
	
	// Include all modules of Skript
	from 'skript-worldguard6/build/classes/java/main'
	from 'skript-worldguard7fawe/build/classes/java/main'
}

task nightlyResources(type: ProcessResources) {
	from ('src/main/resources') {
		include '**'
		def hash = "git rev-parse --short HEAD".execute().text.trim()
		version = project.property("version") + "-nightly-" + hash
		filter ReplaceTokens, tokens: [
			"version": version,
			"today": "" + LocalDate.now(),
			"release-flavor": "skriptlang-nightly", // SkriptLang build, automatically done by CI
			"release-channel": "alpha", // No update checking, but these are VERY unstable
			"release-updater": "ch.njol.skript.update.NoUpdateChecker", // No autoupdates for now
			"release-source": "",
			"release-download": "null"
		]
	}
	into 'build/resources/main'
}

task nightlyRelease(type: Jar) {
	from sourceSets.main.output
	dependsOn nightlyResources
	archiveName = 'Skript-nightly.jar'
	
	manifest {
		attributes("Name": "ch/njol/skript",
				"Sealed": "true")
	}
	
	from('skript-aliases') {
		into('aliases-english')
	}
	
	// Include all modules of Skript
	from 'skript-worldguard6/build/classes/java/main'
	from 'skript-worldguard7fawe/build/classes/java/main'
}
